package celizationserver.swing;

import celization.CElization;
import celization.UserInfo;
import celization.exceptions.UserExistsException;
import celization.mapgeneration.perlinnoise.PerlinNoiseParameters;
import celizationserver.core.CElizationServer;
import celizationserver.core.GameSession;
import java.io.IOException;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author mjafar
 */
public class ManagerForm extends javax.swing.JFrame {

    private boolean showOfflineUsers = true;
    private boolean showInactiveGames = true;
    private javax.swing.table.DefaultTableModel gamesModel;
    private javax.swing.DefaultListModel usersModel;
    private CElizationServer serverInstance;

    /**
     * Creates new form ManagerForm
     */
    public ManagerForm(CElizationServer serverInstance) {
        usersModel = new javax.swing.DefaultListModel();
        gamesModel = new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
            "Game Name", "Online users", "Registered users", "Port"
        }) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        initComponents();
        mnuShowOffline.setState(showOfflineUsers);
        mnuShowInactiveGames.setState(showInactiveGames);
        this.serverInstance = serverInstance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGames = new javax.swing.JPanel();
        tblGamesScroller = new javax.swing.JScrollPane();
        tblGames = new javax.swing.JTable();
        pnlUsers = new javax.swing.JPanel();
        lstUseresScroller = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList();
        pnlGameDetails = new javax.swing.JPanel();
        lblTurnsDesc = new javax.swing.JLabel();
        lblTurns = new javax.swing.JLabel();
        lblOnlineUsersDesc = new javax.swing.JLabel();
        lblOnlineUsers = new javax.swing.JLabel();
        lblGameNameDesc = new javax.swing.JLabel();
        lblGameName = new javax.swing.JLabel();
        mnuMenuBar = new javax.swing.JMenuBar();
        mnuGames = new javax.swing.JMenu();
        mnuQSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuNewGame = new javax.swing.JMenuItem();
        mnuDeleteGame = new javax.swing.JMenuItem();
        mnuChangePort = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mnuRefresh = new javax.swing.JMenuItem();
        mnuShutdown = new javax.swing.JMenuItem();
        mnuUsers = new javax.swing.JMenu();
        mnuRegister = new javax.swing.JMenuItem();
        mnuRemoveUser = new javax.swing.JMenuItem();
        mnuKick = new javax.swing.JMenuItem();
        mnuUserDetails = new javax.swing.JMenuItem();
        mnuSendToAll = new javax.swing.JMenuItem();
        mnuView = new javax.swing.JMenu();
        mnuShowOffline = new javax.swing.JCheckBoxMenuItem();
        mnuShowInactiveGames = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CElization server");
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(753, 482));
        setName("frmGameServer"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlGames.setBorder(javax.swing.BorderFactory.createTitledBorder("Games"));
        pnlGames.setName("pnlGames"); // NOI18N

        tblGamesScroller.setName("tblGamesScroller"); // NOI18N

        tblGames.setModel(gamesModel);
        tblGames.setColumnSelectionAllowed(true);
        tblGames.setName("tblGames"); // NOI18N
        tblGames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblGames.setShowVerticalLines(false);
        tblGames.getTableHeader().setReorderingAllowed(false);
        tblGames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGamesMouseClicked(evt);
            }
        });
        tblGamesScroller.setViewportView(tblGames);
        tblGames.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblGames.getColumnModel().getColumn(0).setResizable(false);
        tblGames.getColumnModel().getColumn(1).setResizable(false);
        tblGames.getColumnModel().getColumn(2).setResizable(false);
        tblGames.getColumnModel().getColumn(3).setResizable(false);

        javax.swing.GroupLayout pnlGamesLayout = new javax.swing.GroupLayout(pnlGames);
        pnlGames.setLayout(pnlGamesLayout);
        pnlGamesLayout.setHorizontalGroup(
            pnlGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGamesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tblGamesScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlGamesLayout.setVerticalGroup(
            pnlGamesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGamesLayout.createSequentialGroup()
                .addComponent(tblGamesScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlUsers.setBorder(javax.swing.BorderFactory.createTitledBorder("Users"));
        pnlUsers.setName("pnlUsers"); // NOI18N

        lstUseresScroller.setName("lstUseresScroller"); // NOI18N

        lstUsers.setModel(usersModel);
        lstUsers.setName("lstUsers"); // NOI18N
        lstUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstUsersMouseClicked(evt);
            }
        });
        lstUseresScroller.setViewportView(lstUsers);

        javax.swing.GroupLayout pnlUsersLayout = new javax.swing.GroupLayout(pnlUsers);
        pnlUsers.setLayout(pnlUsersLayout);
        pnlUsersLayout.setHorizontalGroup(
            pnlUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUsersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lstUseresScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlUsersLayout.setVerticalGroup(
            pnlUsersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUsersLayout.createSequentialGroup()
                .addComponent(lstUseresScroller)
                .addContainerGap())
        );

        pnlGameDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Game Details"));
        pnlGameDetails.setName("pnlGameDetails"); // NOI18N

        lblTurnsDesc.setText("Turns played:");
        lblTurnsDesc.setName("lblTurnsDesc"); // NOI18N

        lblTurns.setText("");
        lblTurns.setName("lblTurns"); // NOI18N

        lblOnlineUsersDesc.setText("Online Users:");
        lblOnlineUsersDesc.setName("lblOnlineUsersDesc"); // NOI18N

        lblOnlineUsers.setText("");
        lblOnlineUsers.setName("lblOnlineUsers"); // NOI18N

        lblGameNameDesc.setText("Name:");
        lblGameNameDesc.setName("lblGameNameDesc"); // NOI18N

        lblGameName.setText("");
        lblGameName.setName("lblGameName"); // NOI18N

        javax.swing.GroupLayout pnlGameDetailsLayout = new javax.swing.GroupLayout(pnlGameDetails);
        pnlGameDetails.setLayout(pnlGameDetailsLayout);
        pnlGameDetailsLayout.setHorizontalGroup(
            pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGameDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGameDetailsLayout.createSequentialGroup()
                        .addGroup(pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOnlineUsersDesc)
                            .addComponent(lblTurnsDesc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTurns, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOnlineUsers))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlGameDetailsLayout.createSequentialGroup()
                        .addComponent(lblGameNameDesc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblGameName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlGameDetailsLayout.setVerticalGroup(
            pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGameDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGameNameDesc)
                    .addComponent(lblGameName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTurnsDesc)
                    .addComponent(lblTurns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGameDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOnlineUsersDesc)
                    .addComponent(lblOnlineUsers))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        mnuMenuBar.setName("mnuMenuBar"); // NOI18N

        mnuGames.setText("Games");
        mnuGames.setToolTipText("");
        mnuGames.setName("mnuGames"); // NOI18N

        mnuQSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuQSave.setMnemonic('s');
        mnuQSave.setText("Quick save");
        mnuQSave.setToolTipText("");
        mnuQSave.setName("mnuQSave"); // NOI18N
        mnuQSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuQSaveActionPerformed(evt);
            }
        });
        mnuGames.add(mnuQSave);

        jSeparator1.setName("jSeparator1"); // NOI18N
        mnuGames.add(jSeparator1);

        mnuNewGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuNewGame.setMnemonic('n');
        mnuNewGame.setText("New game");
        mnuNewGame.setName("mnuNewGame"); // NOI18N
        mnuNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewGameActionPerformed(evt);
            }
        });
        mnuGames.add(mnuNewGame);

        mnuDeleteGame.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        mnuDeleteGame.setMnemonic('d');
        mnuDeleteGame.setText("Delete game");
        mnuDeleteGame.setEnabled(false);
        mnuDeleteGame.setName("mnuDeleteGame"); // NOI18N
        mnuGames.add(mnuDeleteGame);

        mnuChangePort.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        mnuChangePort.setMnemonic('p');
        mnuChangePort.setText("Change port");
        mnuChangePort.setEnabled(false);
        mnuChangePort.setName("mnuChangePort"); // NOI18N
        mnuGames.add(mnuChangePort);

        jSeparator2.setName("jSeparator2"); // NOI18N
        mnuGames.add(jSeparator2);

        mnuRefresh.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        mnuRefresh.setMnemonic('r');
        mnuRefresh.setText("Refresh");
        mnuRefresh.setToolTipText("");
        mnuRefresh.setName("mnuRefresh"); // NOI18N
        mnuRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRefreshActionPerformed(evt);
            }
        });
        mnuGames.add(mnuRefresh);

        mnuShutdown.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        mnuShutdown.setMnemonic('d');
        mnuShutdown.setText("Shut server down");
        mnuShutdown.setName("mnuShutdown"); // NOI18N
        mnuShutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShutdownActionPerformed(evt);
            }
        });
        mnuGames.add(mnuShutdown);

        mnuMenuBar.add(mnuGames);

        mnuUsers.setText("Users");
        mnuUsers.setName("mnuUsers"); // NOI18N

        mnuRegister.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        mnuRegister.setMnemonic('r');
        mnuRegister.setText("Register new user");
        mnuRegister.setName("mnuRegister"); // NOI18N
        mnuRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRegisterActionPerformed(evt);
            }
        });
        mnuUsers.add(mnuRegister);

        mnuRemoveUser.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.SHIFT_MASK));
        mnuRemoveUser.setMnemonic('e');
        mnuRemoveUser.setText("Remove User");
        mnuRemoveUser.setToolTipText("");
        mnuRemoveUser.setName("mnuRemoveUser"); // NOI18N
        mnuRemoveUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRemoveUserActionPerformed(evt);
            }
        });
        mnuUsers.add(mnuRemoveUser);

        mnuKick.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_MASK));
        mnuKick.setMnemonic('k');
        mnuKick.setText("Kick user");
        mnuKick.setToolTipText("");
        mnuKick.setName("mnuKick"); // NOI18N
        mnuKick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuKickActionPerformed(evt);
            }
        });
        mnuUsers.add(mnuKick);

        mnuUserDetails.setMnemonic('d');
        mnuUserDetails.setText("Show details");
        mnuUserDetails.setName("mnuUserDetails"); // NOI18N
        mnuUserDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUserDetailsActionPerformed(evt);
            }
        });
        mnuUsers.add(mnuUserDetails);

        mnuSendToAll.setText("Send to message to All");
        mnuSendToAll.setName("mnuSendToAll"); // NOI18N
        mnuSendToAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSendToAllActionPerformed(evt);
            }
        });
        mnuUsers.add(mnuSendToAll);

        mnuMenuBar.add(mnuUsers);

        mnuView.setMnemonic('o');
        mnuView.setText("View");
        mnuView.setName("mnuView"); // NOI18N

        mnuShowOffline.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuShowOffline.setMnemonic('o');
        mnuShowOffline.setSelected(true);
        mnuShowOffline.setText("Show offline users");
        mnuShowOffline.setName("mnuShowOffline"); // NOI18N
        mnuShowOffline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowOfflineActionPerformed(evt);
            }
        });
        mnuView.add(mnuShowOffline);

        mnuShowInactiveGames.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        mnuShowInactiveGames.setMnemonic('i');
        mnuShowInactiveGames.setSelected(true);
        mnuShowInactiveGames.setText("Show inactive games");
        mnuShowInactiveGames.setName("mnuShowInactiveGames"); // NOI18N
        mnuShowInactiveGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuShowInactiveGamesActionPerformed(evt);
            }
        });
        mnuView.add(mnuShowInactiveGames);

        mnuMenuBar.add(mnuView);

        setJMenuBar(mnuMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlGames, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlUsers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlGameDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlGames, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlUsers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlGameDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void mnuRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRegisterActionPerformed
        showNewUser();
    }//GEN-LAST:event_mnuRegisterActionPerformed

    private void mnuKickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuKickActionPerformed
        kickUser();
    }//GEN-LAST:event_mnuKickActionPerformed

    private void mnuUserDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUserDetailsActionPerformed
        showUserDetails();
    }//GEN-LAST:event_mnuUserDetailsActionPerformed

    private void mnuQSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuQSaveActionPerformed
        saveGame();
    }//GEN-LAST:event_mnuQSaveActionPerformed

    private void mnuNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewGameActionPerformed
        showNewGame();
    }//GEN-LAST:event_mnuNewGameActionPerformed

    private void mnuShowOfflineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowOfflineActionPerformed
        showOfflineUsers = !showOfflineUsers;
        updateUsersList();
    }//GEN-LAST:event_mnuShowOfflineActionPerformed

    private void mnuShowInactiveGamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShowInactiveGamesActionPerformed
        showInactiveGames = !showInactiveGames;
        updateGamesList();
    }//GEN-LAST:event_mnuShowInactiveGamesActionPerformed

    private void tblGamesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGamesMouseClicked
//        if (evt.getClickCount() == 1) {
        updateGameInfo();
//        } else if (evt.getClickCount() == 2) {
        updateUsersList();
//        }
    }//GEN-LAST:event_tblGamesMouseClicked

    private void lstUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstUsersMouseClicked
        if (evt.getClickCount() >= 2) {
            showUserDetails();
        }
    }//GEN-LAST:event_lstUsersMouseClicked

    private void mnuRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRefreshActionPerformed
        refresh();
    }//GEN-LAST:event_mnuRefreshActionPerformed

    private void mnuShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuShutdownActionPerformed
        if (shutDown()) {
            dispose();
        }
    }//GEN-LAST:event_mnuShutdownActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        mnuShutdownActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void mnuRemoveUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRemoveUserActionPerformed
        removeUser();
    }//GEN-LAST:event_mnuRemoveUserActionPerformed

    private void mnuSendToAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSendToAllActionPerformed
        SendToAllChatMessage frmSendToAll = new SendToAllChatMessage(this, true);
        
        String[] gameNames = new String[tblGames.getRowCount()];
        for (int i = 0; i < gameNames.length; i++) {
            gameNames[i] = (String) tblGames.getValueAt(i, 0);
        }
        frmSendToAll.setGamesList(gameNames);
        
        frmSendToAll.setVisible(true);
        if (frmSendToAll.isCancelled()) {
            return;
        }
        
        String message;
        message = frmSendToAll.getMessage();
        try {
            serverInstance.getGame(frmSendToAll.getGame()).sendMessage("SERVER ADMIN", null, message);
        } catch (IOException ex) {
            Logger.getLogger(ManagerForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    "Failed to send your message.\n"
                    + ex.getMessage(), "Failed to send.",
                    JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_mnuSendToAllActionPerformed

    private String getSelectedUsername() {
        return (String) getSelectedRow(lstUsers);
    }

    private Integer getSelectedGame() {
        if (getSelectedRow(tblGames, 3) == null) {
            return null;
        }
        return Integer.valueOf(getSelectedRow(tblGames, 3).toString());
    }

    private Object getSelectedRow(JList lst) {
        if (lst.getSelectionModel().isSelectionEmpty()) {
            return null;
        }
        return lst.getSelectedValue();
    }

    private Object getSelectedRow(JTable tbl, int column) {
        if (tbl.getSelectedRowCount() == 0) {
            return null;
        }

        int row = tbl.getSelectedRow();
        return tbl.getValueAt(row, column);
    }

    private void showUserDetails() {
        String username = getSelectedUsername();
        if (username == null) {
            return;
        }
        UserInfoForm frmUserInfo = new UserInfoForm(this, false);
        frmUserInfo.setUserInfo(serverInstance.getGame(serverInstance.getUserGamePort(username)).getGame().getUsersList().get(username));
        frmUserInfo.setVisible(true);
    }

    private void removeUser() {
        String username = getSelectedUsername();
        if (username == null) {
            return;
        }
        if (JOptionPane.showConfirmDialog(
                null,
                String.format("Are you sure you that you want to remove %s from the game?\nThis game has no Undo nor ctrl+z buttons!", username),
                "User deleting confirmation",
                JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
            return;
        }

        Integer userGamePort;
        userGamePort = serverInstance.getUserGamePort(username);
        try {
            serverInstance.getGame(userGamePort).removeUser(username);
        } catch (NullPointerException e) {
            // User was already deleted
            JOptionPane.showMessageDialog(this, "User is already deleted. refresh the scene","Already deleted", JOptionPane.WARNING_MESSAGE);
        }
        
        refresh();
    }

    private void kickUser() {
        String username = getSelectedUsername();

        if (username == null) {
            return;
        }

        boolean confirmation;
        confirmation = JOptionPane.showConfirmDialog(
                null,
                String.format("Are you sure you that you want to kick %s from the game?", username),
                "User kicking confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;

        if (!confirmation) {
            return;
        }

        String message = JOptionPane.showInputDialog(
                null,
                "Message to be sent to user to inform " + username
                + "\nthe reason he/she is kicked out of the game.",
                "Message");
        try {
            serverInstance.getGame(getSelectedGame()).sendMessage("ADMINISTRATOR", username, message);
            serverInstance.getGame(getSelectedGame()).kickUser(username);
        } catch (IOException | NullPointerException ex) {
            Logger.getLogger(ManagerForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    "Failed to send message to user.",
                    "Failed to kick",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void showNewGame() {
        NewGame frmNewGame = new NewGame(this, true);
        frmNewGame.setVisible(true);

        if (frmNewGame.isCancelled()) {
            return;
        }

        // Get map parameters
        PerlinNoiseParameters mapParameters = frmNewGame.getPerlinNoiseParameters();
        celizationrequests.Coordinates mapSize = frmNewGame.getMapSize();

        // Get network parameters
        Integer port;
        if (frmNewGame.getAutoPortSelection()) {
            port = new Integer(0);
            // Server socket will choose a free port itself
            // Then we'll find out about chosen port using
            // serverInstance.getPort(name) if it's needed
        } else {
            port = frmNewGame.getPort();
            java.net.ServerSocket testSocket = null;
            try {
                testSocket = new java.net.ServerSocket(port.intValue());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Selected port is in use", "Port unavailable",
                        JOptionPane.ERROR_MESSAGE);
                return;
            } finally {
                if (testSocket != null) {
                    try {
                        testSocket.close();
                    } catch (IOException e) {
                    }
                }
            }
        }

        // Get game name
        String name = frmNewGame.getGameName();

        // Start new game
        GameSession gameData;
        CElization gameInstance;
        gameInstance = new CElization(mapParameters, mapSize);
        gameData = new GameSession(name, gameInstance);
        try {
            serverInstance.addGame(port, gameData);
        } catch (IOException ex) {
            Logger.getLogger(ManagerForm.class.getName()).log(Level.WARNING, null, ex);
            JOptionPane.showMessageDialog(
                    null,
                    "Failed to open listening socket.\n"
                    + "Make sure another program is not using " + port.toString() + " port and check your firewall settings.",
                    "Failed to start network",
                    JOptionPane.ERROR_MESSAGE);
        }

        // Update UI
        updateGamesList();
    }

    private void showNewUser() {
        if (serverInstance.getGamesPortsSet().size() == 0) {
            JOptionPane.showMessageDialog(this, "There is no game to register new user in", "No game", JOptionPane.WARNING_MESSAGE);
            return;
        }
        UserRegister frmNewUser = new UserRegister(this, true);

        String[] gameNames = new String[tblGames.getRowCount()];
        for (int i = 0; i < gameNames.length; i++) {
            gameNames[i] = (String) tblGames.getValueAt(i, 0);
        }
        frmNewUser.setGamesList(gameNames);

        frmNewUser.setVisible(true);
        if (frmNewUser.isCancelled()) {
            return;
        }

        // Add user to game
        UserInfo newUserInfo = frmNewUser.getUserInfo(serverInstance);
        Integer port = frmNewUser.getPort(serverInstance);
        try {
            serverInstance.addUser(newUserInfo, port);
        } catch (UserExistsException ex) {
            JOptionPane.showMessageDialog(
                    null,
                    "Username is repetetive in the selected game.",
                    "User already exists",
                    JOptionPane.ERROR_MESSAGE);
        }

        // Set natural resources
        serverInstance.getGame(port).getGame().getUsersList().get(newUserInfo.getUsername()).getGame().setResources(frmNewUser.getInitialNaturalResources());

        // Update UI
        updateGamesList();
//        updateUsersList();
    }

    public void refresh() {
        Integer selectedGame = getSelectedGame();
        updateGamesList();
        updateGameInfo();
        updateUsersList();
    }

    private void updateGamesList() {
        // Clear table
        for (int index = gamesModel.getRowCount() - 1; index >= 0; index--) {
            gamesModel.removeRow(index);
        }
        // Add rows to table
        Object[] rowData = new Object[4];
        GameSession gameData;
        if (serverInstance.getGamesPortsSet().size() == 0) {
            return;
        }
        for (Integer port : serverInstance.getGamesPortsSet()) {
            gameData = serverInstance.getGame(port);
            rowData[0] = gameData.getName();
            rowData[1] = gameData.getOnlineCount();
            rowData[2] = gameData.getGame().getUsersCount();
            rowData[3] = port;
            if (!showInactiveGames && rowData[1] == 0) {
                continue;
            }
            gamesModel.addRow(rowData);
        }
    }

    private void updateGameInfo() {
        Integer gamePort = getSelectedGame();
        if (gamePort == null) {
            return;
        }
        GameSession gameWrapper = serverInstance.getGame(gamePort);

        int turns = gameWrapper.getGame().getTurn();
        int onlineUsers = serverInstance.getGame(gamePort).getOnlineCount();
        int totalUsers = serverInstance.getGame(gamePort).getGame().getUsersCount();

        lblGameName.setText(gameWrapper.getName());
        lblTurns.setText(String.format("%d", turns));
        lblOnlineUsers.setText(String.format("%d / %d", onlineUsers, totalUsers));
    }

    private void updateUsersList() {
        Integer gamePort = getSelectedGame();
        if (gamePort == null) {
            return;
        }
        usersModel.clear();
        Set<String> usersList;
        if (showOfflineUsers) {
            usersList = serverInstance.getGame(gamePort).getGame().getUsersList().keySet();
        } else {
            usersList = serverInstance.getGame(gamePort).getOnlineSet();
        }
        if (usersList.size() == 0) {
            return;
        }
        usersModel.setSize(usersList.size());
        int index = 0;
        for (String userName : usersList) {
            usersModel.set(index++, userName);
        }
    }

    private boolean shutDown() {
        if (JOptionPane.showConfirmDialog(this,
                "Do you really want to cancel all games and disconnect from all clients and shut server down?\n"
                + "Users game data will be saved.",
                "Shutdown confirmation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE)
                != JOptionPane.YES_OPTION) {
            return false;
        }
        try {
            saveGame();
            serverInstance.shutDown();
            return true;
        } catch (IOException ex) {
            Logger.getLogger(ManagerForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Failed to shut the server down.");
            return false;
        }
    }

    private void saveGame() {
        try {
            CElizationServer.saveGame(serverInstance);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblGameName;
    private javax.swing.JLabel lblGameNameDesc;
    private javax.swing.JLabel lblOnlineUsers;
    private javax.swing.JLabel lblOnlineUsersDesc;
    private javax.swing.JLabel lblTurns;
    private javax.swing.JLabel lblTurnsDesc;
    private javax.swing.JScrollPane lstUseresScroller;
    private javax.swing.JList lstUsers;
    private javax.swing.JMenuItem mnuChangePort;
    private javax.swing.JMenuItem mnuDeleteGame;
    private javax.swing.JMenu mnuGames;
    private javax.swing.JMenuItem mnuKick;
    private javax.swing.JMenuBar mnuMenuBar;
    private javax.swing.JMenuItem mnuNewGame;
    private javax.swing.JMenuItem mnuQSave;
    private javax.swing.JMenuItem mnuRefresh;
    private javax.swing.JMenuItem mnuRegister;
    private javax.swing.JMenuItem mnuRemoveUser;
    private javax.swing.JMenuItem mnuSendToAll;
    private javax.swing.JCheckBoxMenuItem mnuShowInactiveGames;
    private javax.swing.JCheckBoxMenuItem mnuShowOffline;
    private javax.swing.JMenuItem mnuShutdown;
    private javax.swing.JMenuItem mnuUserDetails;
    private javax.swing.JMenu mnuUsers;
    private javax.swing.JMenu mnuView;
    private javax.swing.JPanel pnlGameDetails;
    private javax.swing.JPanel pnlGames;
    private javax.swing.JPanel pnlUsers;
    private javax.swing.JTable tblGames;
    private javax.swing.JScrollPane tblGamesScroller;
    // End of variables declaration//GEN-END:variables
//    @Override
//    public void dispose() {
//        super.dispose();
//        System.exit(0);
//    }
}
