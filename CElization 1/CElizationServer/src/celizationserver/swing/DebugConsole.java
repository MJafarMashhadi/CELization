package celizationserver.swing;

import celization.GameState;
import celizationrequests.GameObjectID;
import celizationserver.core.GameSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author mjafar
 */
public final class DebugConsole extends javax.swing.JFrame {

    private GameSession session;
    private HTMLEditorKit messageKit;
    private HTMLDocument messageDoc;
    public static final String CMD_INFO = "info";
    public static final String CMD_ACTION = "action";
    private static ArrayList<String> history = new ArrayList<>();
    private int index = -1;

    /**
     * Creates new form DebugConsole
     */
    public DebugConsole() {
        messageKit = new HTMLEditorKit();
        messageDoc = new HTMLDocument();

        initComponents();

        // به ظرز احــــــــــــــمقانه ای ترتیب ایندو مهم است
        messagePane.setEditorKit(messageKit);
        messagePane.setDocument(messageDoc);

        getContentPane().setBackground(getBackground());
        inputField.setCaretColor(inputField.getForeground());
    }

    public void setGame(GameSession gs) {
        session = gs;
        lblGameName.setText(session.getName());
        success(String.format("Initialized with [%s]", session.getName()));
    }

    private void addMessage(String message) {
        if (message == null || message.trim().isEmpty()) {
            return;
        }
        try {
            messageKit.insertHTML(messageDoc, messageDoc.getLength(), message, 0, 0, null);
            messagePane.updateUI();
        } catch (BadLocationException | IOException e) {
            e.printStackTrace();
        }
    }

    public void printInfo(HashMap<String, String> info) {
        StringBuilder str = new StringBuilder();
        str.append("<table>\n");
        for (Entry<String, String> pair : info.entrySet()) {
            str.append("\t<tr><td><font color='blue'>  ")
                    .append(pair.getKey())
                    .append("</font></td><td>")
                    .append(pair.getValue())
                    .append("</td></tr>\n");
        }
        str.append("</table>");
        addMessage(str.toString());
    }

    public void message(String message) {
        addMessage(String.format("<b>>></b><font color=\"blue\">%s</font>", message));
    }

    public void success(String message) {
        addMessage(String.format("<b>>></b><font color=\"green\">%s</font>", message));
    }

    public void error(String message) {
        addMessage(String.format("<b>>></b><font color=\"red\">%s</font>", message));
    }

    public void takeActionCommand(String id, String command) {
        /*
         String result = Judge.action(id.trim(), command.trim());
         addMessage("<font color='blue'>> </font>  [" + id + "]  " + command);
         if (result != null && result.contains("invalid")) {
         error(result);
         } else if (result != null && result.contains("command suc")) {
         success(result);
         } else {
         addMessage(result);
         }*/
    }

    private void blockInfo(String command) {
        /*
         HashMap<String, String> info = frame.info(command);
         System.out.println(command);
         Scanner scanner = new Scanner(command);
         scanner.next();
         int row = scanner.nextInt();
         int col = scanner.nextInt();
         addMessage("<font color='blue'>> </font>  block  " + "[" + row + "," + col + "]  ");
         printInfo(info);
         scanner.close();*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblGameName = new javax.swing.JLabel();
        pnlConsole = new javax.swing.JPanel();
        scroller = new javax.swing.JScrollPane();
        messagePane = new javax.swing.JTextPane();
        inputField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Debug console");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(102, 102, 102));
        setLocationByPlatform(true);
        setName("Debug Console"); // NOI18N
        setResizable(false);

        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Game:");

        lblGameName.setForeground(new java.awt.Color(204, 204, 204));
        lblGameName.setText("jLabel2");

        pnlConsole.setBackground(new java.awt.Color(51, 51, 51));
        pnlConsole.setForeground(new java.awt.Color(237, 237, 237));
        pnlConsole.setLayout(new java.awt.BorderLayout());

        messagePane.setEditable(false);
        messagePane.setBackground(new java.awt.Color(252, 252, 252));
        messagePane.setFocusCycleRoot(false);
        scroller.setViewportView(messagePane);

        pnlConsole.add(scroller, java.awt.BorderLayout.CENTER);

        inputField.setBackground(new java.awt.Color(51, 51, 51));
        inputField.setFont(FontsLoader.consoleFont);
        inputField.setForeground(new java.awt.Color(0, 204, 0));
        inputField.setFocusCycleRoot(true);
        inputField.setPreferredSize(new java.awt.Dimension(100, 70));
        inputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFieldActionPerformed(evt);
            }
        });
        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputFieldKeyPressed(evt);
            }
        });
        pnlConsole.add(inputField, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblGameName)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblGameName))
                .addGap(18, 18, 18)
                .addComponent(pnlConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFieldActionPerformed
        String inputCommand = inputField.getText().trim();
        if (inputCommand.isEmpty()) {
            return;
        }
        history.add(inputCommand);
        try {
            if ("ls".equalsIgnoreCase(inputCommand)) {
                message("Users list:");
                StringBuilder sb = new StringBuilder();
                sb.append("<table>");
                boolean isOnline = false;
                for (String username : session.getGame().getUsersList().keySet()) {
                    isOnline = session.getOnlineSet().contains(username);
                    sb.append(String.format("<tr><td>%s%s%s</td></tr>\n", isOnline ? "<b>" : "", username, isOnline ? "</b>" : ""));
                }
                sb.append("</table>");
                addMessage(sb.toString());
                return;
            } else if ("exit".equalsIgnoreCase(inputCommand) || "quit".equalsIgnoreCase(inputCommand)) {
                dispose();
                return;
            }
            String[] parts = inputCommand.split("[.]");
            if (parts.length != 3) {
                error("Input format is not correct.\n<br />   username.id.command([args, ...])"
                        + "\n<br />    ls\n<br />    exit\n<br />    quit<br />");
                return;
            }
            String user = parts[0];
            String id = parts[1];
            String function = parts[2];
            int leftPindex = function.indexOf('(');
            int rightPindex = function.lastIndexOf(')');
            if (rightPindex == -1 && leftPindex != -1) {
                error("Invalid syntax, '(' is not closed.");
                return;
            }
            String functionName;
            String[] arguments;
            if (leftPindex == -1) {
                functionName = function;
                arguments = new String[0];
            } else {
                functionName = function.substring(0, leftPindex).trim();
                arguments = function.substring(leftPindex + 1, rightPindex).trim().split(",");
            }

            if (!session.getGame().isUserInGame(user)) {
                error(String.format("User [%s] does not exist in this game.", user));
                return;
            }
            
            GameObjectID effectiveID = null;
            celization.GameState userGame = session.getGame().getUsersList().get(user).getGame();
            // Find ID:
            effectiveID = findID(id, userGame);
            if (effectiveID == null) {
                error(String.format("ID [%s] does not exists.", user));
                return;
            }
            // TODO : return judge...
            switch (functionName) {
                case CMD_ACTION:

                    break;
                case CMD_INFO:
                    
                    break;
                default:
                    error(String.format("Action [%s] does not exist.", functionName));
            }
            /*
             try {
             Scanner scanner = new Scanner(inputCommand);
             if (inputCommand.startsWith("set")) {
                    
             scanner.next();
             String prop = scanner.next();
             if (prop.equals("delay")) {
             delay = scanner.nextInt();
             }
             } else if (inputCommand.startsWith("block")) {
             //                    blockInfo(command);
             } else if (inputCommand.startsWith("info")) {
             Scanner scanner = new Scanner(inputCommand);
             if (!scanner.next().equals("info")) {
             return;
             }
             String id = null;
             if (inputCommand.contains("block")) {
             inputCommand = inputCommand.substring(inputCommand.indexOf("block"));
             //                        blockInfo(command);
             return;
             } else if (scanner.hasNext()) {
             id = scanner.next();
             }
             addMessage("<font color='blue'>> </font>  [" + id + "]  " + "info");
             HashMap<String, String> info = frame.info(id);
             System.out.println(info);
             if (info == null) {
             error("invalid id");
             } else {
             printInfo(info);
             }
             } else if (inputCommand.matches("p(l(a(y)?)?)?( \\d*)?")) {
             final int count;
             inputCommand = inputCommand.replaceAll("[^0-9]", "");
             if (inputCommand.isEmpty()) {
             count = 1;
             } else {
             count = Integer.parseInt(inputCommand);
             }
             (new Thread() {
             public void run() {
             for (int i = 0; i < count; i++) {
             String[] messages = Judge.nextTurn();
             for (String message : messages) {
             addMessage(message);
             }
             frame.update();
             try {
             Thread.sleep(delay);
             } catch (InterruptedException e) {
             e.printStackTrace();
             }
             }
             }
             }).start();
             } else {
             String id = this.id;

             if (id == null) {
             Scanner scanner = new Scanner(inputCommand);
             id = scanner.next();
             inputCommand = scanner.nextLine();
             scanner.close();
             }
             takeActionCommand(id, inputCommand);
             }
             } catch (NoSuchElementException xe) {
             error("bad command");
             }
             frame.update();
             */
        } finally {
            inputField.setText("");
        }

    }//GEN-LAST:event_inputFieldActionPerformed

    private void inputFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_UP) {
            if (index == -1) {
                index = history.size();
            }
            --index;
            index = Math.max(0, index);
            /*
             if (!inputField.getText().isEmpty()) {
             history.add(inputField.getText());
             }
             */
            if (history.size() > 0) {
                inputField.setText(history.get(index));
            } else {
                inputField.setText("");
            }
        } else if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN) {
            if (index == -1) {
                return;
            }
            ++index;
            if (index >= history.size()) {
                index = -1;
                inputField.setText("");
            } else {
                inputField.setText(history.get(index));
            }
        }
    }//GEN-LAST:event_inputFieldKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblGameName;
    private javax.swing.JTextPane messagePane;
    private javax.swing.JPanel pnlConsole;
    private javax.swing.JScrollPane scroller;
    // End of variables declaration//GEN-END:variables

    private GameObjectID findID(String id, GameState userGame) {
        for (GameObjectID idobj : userGame.getCivilians().keySet()) {
            if (idobj.toString().equals(id)) {
                return idobj;
            }
        }
        
        for (GameObjectID idobj : userGame.getBuildings().keySet()) {
            if (idobj.toString().equals(id)) {
                return idobj;
            }
        }
        
        for (GameObjectID idobj : userGame.getBoats().keySet()) {
            if (idobj.toString().equals(id)) {
                return idobj;
            }
        }
        
        return null;
    }
}
